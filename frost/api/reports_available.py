# generated by datamodel-codegen:
#   filename:  frost-reports-available.json
#   timestamp: 2024-02-16T12:50:31+00:00

from __future__ import annotations

from typing import List, Optional

from pydantic import BaseModel, Field, model_validator


class SourceId(BaseModel):
    type: str


class Properties(BaseModel):
    source_id: SourceId = Field(..., alias="SourceID")


class InputSchema(BaseModel):
    additional_properties: bool = Field(..., alias="additionalProperties")
    properties: Properties
    required: List[str]
    type: str


class FirstYearOfPeriod(BaseModel):
    type: str


class LastYearOfPeriod(BaseModel):
    type: str


class NumberOfSeasons(BaseModel):
    type: str


class ReferencePeriod(BaseModel):
    type: str


class SeedParameter(BaseModel):
    type: str


class Sourceid(BaseModel):
    type: str


class Duration(BaseModel):
    type: str


class Lowerinterval(BaseModel):
    type: str


class Returnperiod(BaseModel):
    type: str


class Upperinterval(BaseModel):
    type: str


class Value(BaseModel):
    type: str


class Properties2(BaseModel):
    duration: Duration
    lowerinterval: Lowerinterval
    returnperiod: Returnperiod
    upperinterval: Upperinterval
    value: Value


class Items(BaseModel):
    properties: Properties2
    type: str


class Summer(BaseModel):
    items: Items
    type: str


class Unit(BaseModel):
    type: str


class UpdatedAt(BaseModel):
    type: str


class Properties3(BaseModel):
    duration: Duration
    lowerinterval: Lowerinterval
    returnperiod: Returnperiod
    upperinterval: Upperinterval
    value: Value


class Items1(BaseModel):
    properties: Properties3
    type: str


class Winter(BaseModel):
    items: Items1
    type: str


class Properties1(BaseModel):
    first_year_of_period: FirstYearOfPeriod = Field(..., alias="firstYearOfPeriod")
    last_year_of_period: LastYearOfPeriod = Field(..., alias="lastYearOfPeriod")
    number_of_seasons: NumberOfSeasons = Field(..., alias="numberOfSeasons")
    reference_period: ReferencePeriod = Field(..., alias="referencePeriod")
    seed_parameter: SeedParameter = Field(..., alias="seedParameter")
    sourceid: Sourceid
    summer: Summer
    unit: Unit
    updated_at: UpdatedAt = Field(..., alias="updatedAt")
    winter: Winter


class OutputSchema(BaseModel):
    additional_properties: bool = Field(..., alias="additionalProperties")
    properties: Properties1
    required: List[str]
    type: str


class Dut(BaseModel):
    input_schema: InputSchema = Field(..., alias="inputSchema")
    output_schema: OutputSchema = Field(..., alias="outputSchema")


class StationId(BaseModel):
    type: str


class Properties4(BaseModel):
    station_id: StationId = Field(..., alias="StationID")


class InputSchema1(BaseModel):
    properties: Properties4
    required: List[str]


class FromTime(BaseModel):
    type: str


class ToTime(BaseModel):
    type: str


class Field1(BaseModel):
    type: str


class Field2(BaseModel):
    type: str


class Field3(BaseModel):
    type: str


class Field4(BaseModel):
    type: str


class Field5(BaseModel):
    type: str


class Field6(BaseModel):
    type: str


class Field7(BaseModel):
    type: str


class Field8(BaseModel):
    type: str


class Field9(BaseModel):
    type: str


class Field10(BaseModel):
    type: str


class Field11(BaseModel):
    type: str


class Field12(BaseModel):
    type: str


class Properties6(BaseModel):
    field_1: Field1 = Field(..., alias="1")
    field_2: Field2 = Field(..., alias="2")
    field_3: Field3 = Field(..., alias="3")
    field_4: Field4 = Field(..., alias="4")
    field_5: Field5 = Field(..., alias="5")
    field_6: Field6 = Field(..., alias="6")
    field_7: Field7 = Field(..., alias="7")
    field_8: Field8 = Field(..., alias="8")
    field_9: Field9 = Field(..., alias="9")
    field_10: Field10 = Field(..., alias="10")
    field_11: Field11 = Field(..., alias="11")
    field_12: Field12 = Field(..., alias="12")


class Values(BaseModel):
    properties: Properties6
    type: str


class Properties5(BaseModel):
    from_time: FromTime = Field(..., alias="FromTime")
    to_time: ToTime = Field(..., alias="ToTime")
    values: Values = Field(..., alias="Values")


class Items2(BaseModel):
    properties: Properties5
    required: List[str]
    type: str


class OutputSchema1(BaseModel):
    items: Items2
    type: str


class HumidityConstants(BaseModel):
    input_schema: InputSchema1 = Field(..., alias="inputSchema")
    output_schema: OutputSchema1 = Field(..., alias="outputSchema")


class Properties7(BaseModel):
    station_id: StationId = Field(..., alias="StationID")
    unit: Unit = Field(..., alias="Unit")


class InputSchema2(BaseModel):
    properties: Properties7
    required: List[str]


class Items3(BaseModel):
    type: str


class OperatingPeriods(BaseModel):
    items: Items3
    type: str


class QualityClass(BaseModel):
    type: str


class Frequency(BaseModel):
    type: str


class Intensity(BaseModel):
    type: str


class Properties9(BaseModel):
    duration: Duration
    frequency: Frequency
    intensity: Intensity
    lowerinterval: Lowerinterval
    upperinterval: Upperinterval


class Items4(BaseModel):
    properties: Properties9
    type: str


class Values1(BaseModel):
    items: Items4
    type: str


class Properties8(BaseModel):
    first_year_of_period: FirstYearOfPeriod = Field(..., alias="firstYearOfPeriod")
    last_year_of_period: LastYearOfPeriod = Field(..., alias="lastYearOfPeriod")
    number_of_seasons: NumberOfSeasons = Field(..., alias="numberOfSeasons")
    operating_periods: OperatingPeriods = Field(..., alias="operatingPeriods")
    quality_class: QualityClass = Field(..., alias="qualityClass")
    seed_parameter: SeedParameter = Field(..., alias="seedParameter")
    sourceid: Sourceid
    unit: Unit
    updated_at: UpdatedAt = Field(..., alias="updatedAt")
    values: Values1


class OutputSchema2(BaseModel):
    additional_properties: bool = Field(..., alias="additionalProperties")
    properties: Properties8
    required: List[str]
    type: str


class Idf(BaseModel):
    input_schema: InputSchema2 = Field(..., alias="inputSchema")
    output_schema: OutputSchema2 = Field(..., alias="outputSchema")


class ElementId(BaseModel):
    type: str


class Period(BaseModel):
    type: str


class Properties10(BaseModel):
    element_id: ElementId = Field(..., alias="ElementID")
    period: Period = Field(..., alias="Period")
    station_id: StationId = Field(..., alias="StationID")


class InputSchema3(BaseModel):
    properties: Properties10
    required: List[str]


class Day(BaseModel):
    type: str


class Month(BaseModel):
    type: str


class Normal(BaseModel):
    type: str


class Properties12(BaseModel):
    day: Day = Field(..., alias="Day")
    month: Month = Field(..., alias="Month")
    normal: Normal = Field(..., alias="Normal")


class Items5(BaseModel):
    properties: Properties12
    required: List[str]
    type: str


class Normals1(BaseModel):
    items: Items5
    type: str


class Properties11(BaseModel):
    normals: Normals1 = Field(..., alias="Normals")


class OutputSchema3(BaseModel):
    properties: Properties11
    required: List[str]
    type: str


class Normals(BaseModel):
    input_schema: InputSchema3 = Field(..., alias="inputSchema")
    output_schema: OutputSchema3 = Field(..., alias="outputSchema")


class RecordCategory(BaseModel):
    type: str


class Properties13(BaseModel):
    record_category: RecordCategory = Field(..., alias="RecordCategory")
    station_id: StationId = Field(..., alias="StationID")


class InputSchema4(BaseModel):
    additional_properties: bool = Field(..., alias="additionalProperties")
    properties: Properties13
    required: List[str]


class Label(BaseModel):
    type: str


class ObsTime(BaseModel):
    type: str


class TimeSeriesId(BaseModel):
    type: str


class Properties15(BaseModel):
    label: Label
    obs_time: ObsTime = Field(..., alias="obsTime")
    time_series_id: TimeSeriesId = Field(..., alias="timeSeriesID")


class Items7(BaseModel):
    additional_properties: bool = Field(..., alias="additionalProperties")
    properties: Properties15
    required: List[str]
    type: str


class Instances(BaseModel):
    items: Items7
    min_items: int = Field(..., alias="minItems")
    type: str


class Order(BaseModel):
    type: str


class RecordFrom(BaseModel):
    type: str


class RecordTo(BaseModel):
    type: str


class Properties14(BaseModel):
    instances: Instances
    label: Label
    order: Order
    record_from: RecordFrom = Field(..., alias="recordFrom")
    record_to: RecordTo = Field(..., alias="recordTo")
    value: Value


class Items6(BaseModel):
    additional_properties: bool = Field(..., alias="additionalProperties")
    properties: Properties14
    required: List[str]
    type: str


class RecordChronology(BaseModel):
    items: Items6
    type: str


class Alltime(BaseModel):
    field_ref: str = Field(..., alias="$ref")


class Field101(BaseModel):
    field_ref: str = Field(..., alias="$ref")


class Field111(BaseModel):
    field_ref: str = Field(..., alias="$ref")


class Field121(BaseModel):
    field_ref: str = Field(..., alias="$ref")


class Field01(BaseModel):
    field_ref: str = Field(..., alias="$ref")


class Field02(BaseModel):
    field_ref: str = Field(..., alias="$ref")


class Field03(BaseModel):
    field_ref: str = Field(..., alias="$ref")


class Field04(BaseModel):
    field_ref: str = Field(..., alias="$ref")


class Field05(BaseModel):
    field_ref: str = Field(..., alias="$ref")


class Field06(BaseModel):
    field_ref: str = Field(..., alias="$ref")


class Field07(BaseModel):
    field_ref: str = Field(..., alias="$ref")


class Field08(BaseModel):
    field_ref: str = Field(..., alias="$ref")


class Field09(BaseModel):
    field_ref: str = Field(..., alias="$ref")


class Properties17(BaseModel):
    field_10: Field101 = Field(..., alias="10")
    field_11: Field111 = Field(..., alias="11")
    field_12: Field121 = Field(..., alias="12")
    field_01: Field01 = Field(..., alias="01")
    field_02: Field02 = Field(..., alias="02")
    field_03: Field03 = Field(..., alias="03")
    field_04: Field04 = Field(..., alias="04")
    field_05: Field05 = Field(..., alias="05")
    field_06: Field06 = Field(..., alias="06")
    field_07: Field07 = Field(..., alias="07")
    field_08: Field08 = Field(..., alias="08")
    field_09: Field09 = Field(..., alias="09")


class Months(BaseModel):
    additional_properties: bool = Field(..., alias="additionalProperties")
    properties: Properties17
    type: str


class Properties16(BaseModel):
    alltime: Alltime
    months: Months


class RecordMonths(BaseModel):
    additional_properties: bool = Field(..., alias="additionalProperties")
    properties: Properties16
    type: str


class FieldDefs(BaseModel):
    record_chronology: RecordChronology = Field(..., alias="recordChronology")
    record_months: RecordMonths = Field(..., alias="recordMonths")


class Days(BaseModel):
    type: str


class LongestGapSeconds(BaseModel):
    type: str


class Months1(BaseModel):
    type: str


class ValueCount(BaseModel):
    type: str


class Years(BaseModel):
    type: str


class Properties19(BaseModel):
    days: Days
    longest_gap_seconds: LongestGapSeconds = Field(..., alias="longestGapSeconds")
    months: Months1
    value_count: ValueCount = Field(..., alias="valueCount")
    years: Years


class DataCoverage(BaseModel):
    additional_properties: bool = Field(..., alias="additionalProperties")
    properties: Properties19
    required: List[str]
    type: str


class Max(BaseModel):
    field_ref: str = Field(..., alias="$ref")


class Items9(BaseModel):
    type: str


class Items8(BaseModel):
    items: Items9
    max_items: int = Field(..., alias="maxItems")
    min_items: int = Field(..., alias="minItems")
    type: str


class MeasurementPeriods(BaseModel):
    items: Items8
    min_items: int = Field(..., alias="minItems")
    type: str


class Min(BaseModel):
    field_ref: str = Field(..., alias="$ref")


class UpdatedFullScan(BaseModel):
    type: str


class UpdatedIncremental(BaseModel):
    type: str


class Properties18(BaseModel):
    data_coverage: DataCoverage = Field(..., alias="dataCoverage")
    max: Max
    measurement_periods: MeasurementPeriods = Field(..., alias="measurementPeriods")
    min: Min
    record_category: RecordCategory = Field(..., alias="recordCategory")
    station_id: StationId = Field(..., alias="stationID")
    updated_full_scan: UpdatedFullScan = Field(..., alias="updatedFullScan")
    updated_incremental: UpdatedIncremental = Field(..., alias="updatedIncremental")


class OutputSchema4(BaseModel):
    field_defs: FieldDefs = Field(..., alias="$defs")
    additional_properties: bool = Field(..., alias="additionalProperties")
    properties: Properties18
    required: List[str]
    type: str


class StationRecords(BaseModel):
    input_schema: InputSchema4 = Field(..., alias="inputSchema")
    output_schema: OutputSchema4 = Field(..., alias="outputSchema")


class Properties20(BaseModel):
    station_id: StationId = Field(..., alias="StationID")


class InputSchema5(BaseModel):
    properties: Properties20
    required: List[str]


class Field102(BaseModel):
    type: str


class Field112(BaseModel):
    type: str


class Field122(BaseModel):
    type: str


class Properties22(BaseModel):
    field_1: Field1 = Field(..., alias="1")
    field_2: Field2 = Field(..., alias="2")
    field_3: Field3 = Field(..., alias="3")
    field_4: Field4 = Field(..., alias="4")
    field_5: Field5 = Field(..., alias="5")
    field_6: Field6 = Field(..., alias="6")
    field_7: Field7 = Field(..., alias="7")
    field_8: Field8 = Field(..., alias="8")
    field_9: Field9 = Field(..., alias="9")
    field_10: Field102 = Field(..., alias="10")
    field_11: Field112 = Field(..., alias="11")
    field_12: Field122 = Field(..., alias="12")


class Values2(BaseModel):
    properties: Properties22
    type: str


class Properties21(BaseModel):
    from_time: FromTime = Field(..., alias="FromTime")
    to_time: ToTime = Field(..., alias="ToTime")
    values: Values2 = Field(..., alias="Values")


class Items10(BaseModel):
    properties: Properties21
    required: List[str]
    type: str


class OutputSchema5(BaseModel):
    items: Items10
    type: str


class TemperatureConstants(BaseModel):
    input_schema: InputSchema5 = Field(..., alias="inputSchema")
    output_schema: OutputSchema5 = Field(..., alias="outputSchema")


class MaxWindSpeed(BaseModel):
    type: str


class Items11(BaseModel):
    type: str


class Months2(BaseModel):
    items: Items11
    type: str


class Scale(BaseModel):
    enum: List[str]
    type: str


class Properties23(BaseModel):
    from_time: FromTime = Field(..., alias="FromTime")
    max_wind_speed: MaxWindSpeed = Field(..., alias="MaxWindSpeed")
    months: Months2 = Field(..., alias="Months")
    scale: Scale = Field(..., alias="Scale")
    station_id: StationId = Field(..., alias="StationID")
    to_time: ToTime = Field(..., alias="ToTime")


class InputSchema6(BaseModel):
    properties: Properties23
    required: List[str]


class Title(BaseModel):
    type: str


class Properties25(BaseModel):
    title: Title
    value: Value


class Items12(BaseModel):
    properties: Properties25
    required: List[str]
    type: str


class Extras(BaseModel):
    items: Items12
    type: str


class Name(BaseModel):
    type: str


class Items13(BaseModel):
    type: str


class Sums(BaseModel):
    items: Items13
    type: str


class Titles(BaseModel):
    items: Items13
    type: str


class Properties26(BaseModel):
    name: Name
    sums: Sums
    titles: Titles


class HorizontalAxis(BaseModel):
    properties: Properties26
    required: List[str]
    type: str


class AutomaticData(BaseModel):
    items: Items13
    type: str


class ManualData(BaseModel):
    items: Items13
    type: str


class Months3(BaseModel):
    items: Items13
    type: str


class NumberOfValues(BaseModel):
    type: str


class Properties27(BaseModel):
    automatic_data: AutomaticData = Field(..., alias="automaticData")
    from_time: FromTime = Field(..., alias="fromTime")
    manual_data: ManualData = Field(..., alias="manualData")
    months: Months3
    number_of_values: NumberOfValues = Field(..., alias="numberOfValues")
    station_id: StationId = Field(..., alias="stationID")
    to_time: ToTime = Field(..., alias="toTime")


class Metadata(BaseModel):
    properties: Properties27
    required: List[str]
    type: str


class Items18(BaseModel):
    items: Items13
    type: str


class Table(BaseModel):
    items: Items18
    type: str


class Items20(BaseModel):
    type: str


class Sums1(BaseModel):
    items: Items20
    type: str


class Titles1(BaseModel):
    items: Items20
    type: str


class Properties28(BaseModel):
    name: Name
    sums: Sums1
    titles: Titles1


class VerticalAxis(BaseModel):
    properties: Properties28
    required: List[str]
    type: str


class Properties24(BaseModel):
    extras: Extras
    horizontal_axis: HorizontalAxis = Field(..., alias="horizontalAxis")
    metadata: Metadata
    table: Table
    vertical_axis: VerticalAxis = Field(..., alias="verticalAxis")


class OutputSchema6(BaseModel):
    properties: Properties24
    required: List[str]
    type: str


class WindRose(BaseModel):
    input_schema: InputSchema6 = Field(..., alias="inputSchema")
    output_schema: OutputSchema6 = Field(..., alias="outputSchema")


class Data(BaseModel):
    dut: Optional[Dut] = Field(..., alias="DUT")
    humidity_constants: Optional[HumidityConstants] = Field(
        ..., alias="HumidityConstants"
    )
    idf: Optional[Idf] = Field(..., alias="IDF")
    normals: Optional[Normals] = Field(..., alias="Normals")
    station_records: Optional[StationRecords] = Field(..., alias="StationRecords")
    temperature_constants: Optional[TemperatureConstants] = Field(
        ..., alias="TemperatureConstants"
    )
    wind_rose: Optional[WindRose] = Field(..., alias="WindRose")


class ReportsAvailableResponse(BaseModel):
    data: Data


class ReportsAvailableRequest(BaseModel):
    type: str
