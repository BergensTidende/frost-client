# generated by datamodel-codegen:
#   filename:  frost-openapi.json
#   timestamp: 2024-01-08T11:33:23+00:00

from __future__ import annotations

from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field


class Server(BaseModel):
    url: str


class SecurityItem(BaseModel):
    basic_auth: List = Field(..., alias="basicAuth")


class Tag(BaseModel):
    name: str
    description: str


class Schema(BaseModel):
    type: str
    enum: Optional[List[str]] = None


class Parameter(BaseModel):
    name: str
    in_: str = Field(..., alias="in")
    description: Optional[str] = None
    required: bool
    style: str
    explode: bool
    schema_: Schema = Field(..., alias="schema")
    example: str


class Schema1(BaseModel):
    field_ref: str = Field(..., alias="$ref")


class ApplicationJson(BaseModel):
    schema_: Schema1 = Field(..., alias="schema")


class TextUalf(BaseModel):
    schema_: Schema1 = Field(..., alias="schema")


class Content(BaseModel):
    application_json: ApplicationJson = Field(..., alias="application/json")
    text_ualf: TextUalf = Field(..., alias="text/ualf")


class Field200(BaseModel):
    description: str
    content: Content


class ApplicationJson1(BaseModel):
    schema_: Schema1 = Field(..., alias="schema")


class Content1(BaseModel):
    application_json: ApplicationJson1 = Field(..., alias="application/json")


class Field400(BaseModel):
    description: str
    content: Content1


class Responses(BaseModel):
    field_200: Field200 = Field(..., alias="200")
    field_400: Field400 = Field(..., alias="400")


class Get(BaseModel):
    tags: List[str]
    summary: str
    description: str
    operation_id: str = Field(..., alias="operationId")
    parameters: List[Parameter]
    responses: Responses
    security: List[SecurityItem]


class FieldApiV1LightningGet(BaseModel):
    get: Get


class Schema4(BaseModel):
    type: str
    default: Optional[bool] = None


class Parameter1(BaseModel):
    name: str
    in_: str = Field(..., alias="in")
    description: str
    required: bool
    style: str
    explode: bool
    schema_: Schema4 = Field(..., alias="schema")
    example: Optional[str] = None


class Schema5(BaseModel):
    field_ref: str = Field(..., alias="$ref")


class ApplicationJson2(BaseModel):
    schema_: Schema5 = Field(..., alias="schema")


class Content2(BaseModel):
    application_json: ApplicationJson2 = Field(..., alias="application/json")


class Field503(BaseModel):
    description: str
    content: Content2


class Responses1(BaseModel):
    field_503: Field503 = Field(..., alias="503")


class Get1(BaseModel):
    tags: List[str]
    summary: str
    description: str
    operation_id: str = Field(..., alias="operationId")
    parameters: List[Parameter1]
    responses: Responses1
    security: List[SecurityItem]


class FieldApiV1ObsMetNoFilterGet(BaseModel):
    get: Get1


class Schema6(BaseModel):
    type: str


class Parameter2(BaseModel):
    name: str
    in_: str = Field(..., alias="in")
    description: str
    required: bool
    style: str
    explode: bool
    schema_: Schema6 = Field(..., alias="schema")
    example: str


class Schema7(BaseModel):
    field_ref: str = Field(..., alias="$ref")


class ApplicationJson3(BaseModel):
    schema_: Schema7 = Field(..., alias="schema")


class Content3(BaseModel):
    application_json: ApplicationJson3 = Field(..., alias="application/json")


class Field2001(BaseModel):
    description: str
    content: Content3


class ApplicationJson4(BaseModel):
    schema_: Schema7 = Field(..., alias="schema")


class Content4(BaseModel):
    application_json: ApplicationJson4 = Field(..., alias="application/json")


class Field5031(BaseModel):
    description: str
    content: Content4


class Responses2(BaseModel):
    field_200: Field2001 = Field(..., alias="200")
    field_503: Field5031 = Field(..., alias="503")


class Get2(BaseModel):
    tags: List[str]
    summary: str
    description: str
    operation_id: str = Field(..., alias="operationId")
    parameters: List[Parameter2]
    responses: Responses2
    security: List[SecurityItem]


class FieldApiV1ReportsAvailableGet(BaseModel):
    get: Get2


class Schema9(BaseModel):
    type: str


class Parameter3(BaseModel):
    name: str
    in_: str = Field(..., alias="in")
    description: str
    required: bool
    style: str
    explode: bool
    schema_: Schema9 = Field(..., alias="schema")
    example: str


class Schema10(BaseModel):
    field_ref: str = Field(..., alias="$ref")


class ApplicationJson5(BaseModel):
    schema_: Schema10 = Field(..., alias="schema")


class Content5(BaseModel):
    application_json: ApplicationJson5 = Field(..., alias="application/json")


class Field2002(BaseModel):
    description: str
    content: Content5


class ApplicationJson6(BaseModel):
    schema_: Schema10 = Field(..., alias="schema")


class Content6(BaseModel):
    application_json: ApplicationJson6 = Field(..., alias="application/json")


class Field5032(BaseModel):
    description: str
    content: Content6


class Responses3(BaseModel):
    field_200: Field2002 = Field(..., alias="200")
    field_503: Field5032 = Field(..., alias="503")


class Get3(BaseModel):
    tags: List[str]
    summary: str
    description: str
    operation_id: str = Field(..., alias="operationId")
    parameters: List[Parameter3]
    responses: Responses3
    security: List[SecurityItem]


class FieldApiV1ReportsGet(BaseModel):
    get: Get3


class Paths(BaseModel):
    field_api_v1_lightning_get: FieldApiV1LightningGet = Field(
        ..., alias="/api/v1/lightning/get"
    )
    field_api_v1_obs_met_no_filter_get: FieldApiV1ObsMetNoFilterGet = Field(
        ..., alias="/api/v1/obs/met.no/filter/get"
    )
    field_api_v1_obs_met_no_filter_put: Dict[str, Any] = Field(
        ..., alias="/api/v1/obs/met.no/filter/put"
    )
    field_api_v1_obs_met_no_filter_status: Dict[str, Any] = Field(
        ..., alias="/api/v1/obs/met.no/filter/status"
    )
    field_api_v1_obs_met_no_filter_ts_create: Dict[str, Any] = Field(
        ..., alias="/api/v1/obs/met.no/filter/ts/create"
    )
    field_api_v1_obs_met_no_filter_ts_delete: Dict[str, Any] = Field(
        ..., alias="/api/v1/obs/met.no/filter/ts/delete"
    )
    field_api_v1_obs_met_no_filter_ts_update: Dict[str, Any] = Field(
        ..., alias="/api/v1/obs/met.no/filter/ts/update"
    )
    field_api_v1_obs_met_no_kvkafka_get: Dict[str, Any] = Field(
        ..., alias="/api/v1/obs/met.no/kvkafka/get"
    )
    field_api_v1_obs_met_no_kvkafka_put: Dict[str, Any] = Field(
        ..., alias="/api/v1/obs/met.no/kvkafka/put"
    )
    field_api_v1_obs_met_no_kvkafka_status: Dict[str, Any] = Field(
        ..., alias="/api/v1/obs/met.no/kvkafka/status"
    )
    field_api_v1_obs_met_no_kvkafka_ts_create: Dict[str, Any] = Field(
        ..., alias="/api/v1/obs/met.no/kvkafka/ts/create"
    )
    field_api_v1_obs_met_no_kvkafka_ts_delete: Dict[str, Any] = Field(
        ..., alias="/api/v1/obs/met.no/kvkafka/ts/delete"
    )
    field_api_v1_obs_met_no_kvkafka_ts_update: Dict[str, Any] = Field(
        ..., alias="/api/v1/obs/met.no/kvkafka/ts/update"
    )
    field_api_v1_reports_available_get: FieldApiV1ReportsAvailableGet = Field(
        ..., alias="/api/v1/reports/available/get"
    )
    field_api_v1_reports_get: FieldApiV1ReportsGet = Field(
        ..., alias="/api/v1/reports/get"
    )


class Description(BaseModel):
    type: str


class Name(BaseModel):
    type: str


class FieldType(BaseModel):
    type: str


class Properties1(BaseModel):
    field_type: FieldType = Field(..., alias="@type")
    name: Name


class Provider(BaseModel):
    type: str
    properties: Properties1


class TermsOfService(BaseModel):
    type: str


class Properties(BaseModel):
    description: Description
    name: Name
    provider: Provider
    terms_of_service: TermsOfService = Field(..., alias="termsOfService")


class AboutOk(BaseModel):
    title: str
    type: str
    properties: Properties


class Description1(BaseModel):
    type: str
    example: str


class Items(BaseModel):
    type: str


class Errors(BaseModel):
    type: str
    items: Items


class Status(BaseModel):
    type: str
    example: str
    enum: List[str]


class Properties2(BaseModel):
    description: Description1
    errors: Errors
    status: Status


class Healthz(BaseModel):
    title: str
    required: List[str]
    type: str
    properties: Properties2


class LightningGetOk(BaseModel):
    title: str
    type: str
    properties: Dict[str, Any]


class Tstype(BaseModel):
    type: str
    description: str
    example: str


class Properties4(BaseModel):
    tstype: Tstype


class Data(BaseModel):
    type: str
    properties: Properties4
    description: str


class Properties3(BaseModel):
    data: Data


class ObsMetNoFilterGetOk(BaseModel):
    title: str
    type: str
    properties: Properties3


class Status1(BaseModel):
    type: str
    description: str


class Properties5(BaseModel):
    status: Status1


class ObsMetNoFilterStatusOk(BaseModel):
    title: str
    type: str
    properties: Properties5


class Properties7(BaseModel):
    tstype: Tstype


class Data1(BaseModel):
    type: str
    properties: Properties7
    description: str


class Properties6(BaseModel):
    data: Data1


class ObsMetNoKvkafkaGetOk(BaseModel):
    title: str
    type: str
    properties: Properties6


class Properties8(BaseModel):
    status: Status1


class ObsMetNoKvkafkaStatusOk(BaseModel):
    title: str
    type: str
    properties: Properties8


class Deleted(BaseModel):
    type: str
    description: str
    example: int


class Inserted(BaseModel):
    type: str
    description: str
    example: int


class Status3(BaseModel):
    type: str
    example: str


class Storagebackend(BaseModel):
    type: str
    example: str


class Updated(BaseModel):
    type: str
    description: str
    example: int


class Properties9(BaseModel):
    deleted: Deleted
    inserted: Inserted
    status: Status3
    storagebackend: Storagebackend
    updated: Updated


class ObsPutOk(BaseModel):
    title: str
    required: List[str]
    type: str
    properties: Properties9


class Properties10(BaseModel):
    status: Status3
    storagebackend: Storagebackend


class ObsTsCreateOk(BaseModel):
    title: str
    required: List[str]
    type: str
    properties: Properties10


class Properties11(BaseModel):
    status: Status3
    storagebackend: Storagebackend


class ObsTsDeleteOk(BaseModel):
    title: str
    required: List[str]
    type: str
    properties: Properties11


class Properties12(BaseModel):
    status: Status3
    storagebackend: Storagebackend


class ObsTsUpdateOk(BaseModel):
    title: str
    required: List[str]
    type: str
    properties: Properties12


class ReportsAvailableGetOk(BaseModel):
    title: str
    type: str
    properties: Dict[str, Any]


class ReportsGetOk(BaseModel):
    title: str
    type: str
    properties: Dict[str, Any]


class Schemas(BaseModel):
    about_ok: AboutOk = Field(..., alias="about_OK")
    healthz: Healthz
    lightning_get_ok: LightningGetOk = Field(..., alias="lightning_get_OK")
    obs_met_no_filter_get_ok: ObsMetNoFilterGetOk = Field(
        ..., alias="obs_met.no_filter_get_OK"
    )
    obs_met_no_filter_status_ok: ObsMetNoFilterStatusOk = Field(
        ..., alias="obs_met.no_filter_status_OK"
    )
    obs_met_no_kvkafka_get_ok: ObsMetNoKvkafkaGetOk = Field(
        ..., alias="obs_met.no_kvkafka_get_OK"
    )
    obs_met_no_kvkafka_status_ok: ObsMetNoKvkafkaStatusOk = Field(
        ..., alias="obs_met.no_kvkafka_status_OK"
    )
    obs_put_ok: ObsPutOk = Field(..., alias="obs_put_OK")
    obs_ts_create_ok: ObsTsCreateOk = Field(..., alias="obs_ts_create_OK")
    obs_ts_delete_ok: ObsTsDeleteOk = Field(..., alias="obs_ts_delete_OK")
    obs_ts_update_ok: ObsTsUpdateOk = Field(..., alias="obs_ts_update_OK")
    reports_available_get_ok: ReportsAvailableGetOk = Field(
        ..., alias="reports_available_get_OK"
    )
    reports_get_ok: ReportsGetOk = Field(..., alias="reports_get_OK")
    service_unavailable: Dict[str, Any]
    time_series_not_found: Dict[str, Any]


class BasicAuth(BaseModel):
    type: str
    scheme: str


class SecuritySchemes(BaseModel):
    basic_auth: BasicAuth = Field(..., alias="basicAuth")


class Components(BaseModel):
    schemas: Schemas
    security_schemes: SecuritySchemes = Field(..., alias="securitySchemes")


class FrostAPI(BaseModel):
    openapi: str
    info: Dict[str, Any]
    servers: List[Server]
    security: List[SecurityItem]
    tags: List[Tag]
    paths: Paths
    components: Components
