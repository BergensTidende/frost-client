# generated by datamodel-codegen:
#   filename:  https://frost.met.no/swagger.json
#   timestamp: 2023-10-30T12:02:59+00:00

from __future__ import annotations

from typing import Any, Dict, List, TypedDict

from typing_extensions import NotRequired


class Contact(TypedDict):
    name: str


class License(TypedDict):
    name: str
    url: str


class Info(TypedDict):
    version: str
    title: str
    contact: Contact
    license: License


class Tag(TypedDict):
    name: str


Parameter = TypedDict(
    'Parameter',
    {
        'name': str,
        'in': str,
        'description': str,
        'required': bool,
        'type': str,
        'default': NotRequired[str],
        'enum': NotRequired[List[str]],
    },
)


Schema = TypedDict(
    'Schema',
    {
        '$ref': str,
    },
)


class Field200(TypedDict):
    description: str
    schema_: Schema


class Field400(TypedDict):
    description: str


class Field401(TypedDict):
    description: str


class Field404(TypedDict):
    description: str


class Field500(TypedDict):
    description: str


Responses = TypedDict(
    'Responses',
    {
        '200': Field200,
        '400': Field400,
        '401': Field401,
        '404': Field404,
        '500': Field500,
    },
)


class Get(TypedDict):
    tags: List[str]
    summary: str
    description: str
    operationId: str
    parameters: List[Parameter]
    responses: Responses


class FieldElementsV0Format(TypedDict):
    get: Get


class Field2001(TypedDict):
    description: str
    schema_: Schema


Responses1 = TypedDict(
    'Responses1',
    {
        '200': Field2001,
        '400': Field400,
        '401': Field401,
        '404': Field404,
        '500': Field500,
    },
)


class Get1(TypedDict):
    tags: List[str]
    summary: str
    description: str
    operationId: str
    parameters: List[Parameter]
    responses: Responses1


class FieldElementsCodeTablesV0Format(TypedDict):
    get: Get1


class Field2002(TypedDict):
    description: str
    schema_: Schema


Responses2 = TypedDict(
    'Responses2',
    {
        '200': Field2002,
        '400': Field400,
        '401': Field401,
        '404': Field404,
        '500': Field500,
    },
)


class Get2(TypedDict):
    tags: List[str]
    summary: str
    description: str
    operationId: str
    parameters: List[Parameter]
    responses: Responses2


class FieldClimatenormalsV0Format(TypedDict):
    get: Get2


class Field2003(TypedDict):
    description: str
    schema_: Schema


Responses3 = TypedDict(
    'Responses3',
    {
        '200': Field2003,
        '400': Field400,
        '401': Field401,
        '404': Field404,
        '500': Field500,
    },
)


class Get3(TypedDict):
    tags: List[str]
    summary: str
    description: str
    operationId: str
    parameters: List[Parameter]
    responses: Responses3


class FieldClimatenormalsAvailableV0Format(TypedDict):
    get: Get3


Parameter4 = TypedDict(
    'Parameter4',
    {
        'name': str,
        'in': str,
        'description': str,
        'required': bool,
        'type': str,
        'enum': NotRequired[List[str]],
        'default': NotRequired[str],
    },
)


class Field2004(TypedDict):
    description: str
    schema_: Schema


Responses4 = TypedDict(
    'Responses4',
    {
        '200': Field2004,
        '400': Field400,
        '401': Field401,
        '404': Field404,
        '500': Field500,
    },
)


class Get4(TypedDict):
    tags: List[str]
    summary: str
    description: str
    operationId: str
    parameters: List[Parameter4]
    responses: Responses4


class FieldSourcesV0Format(TypedDict):
    get: Get4


Parameter5 = TypedDict(
    'Parameter5',
    {
        'name': str,
        'in': str,
        'description': str,
        'required': bool,
        'type': str,
        'default': NotRequired[str],
        'enum': NotRequired[List[str]],
    },
)


class Field2005(TypedDict):
    description: str
    schema_: Schema


Responses5 = TypedDict(
    'Responses5',
    {
        '200': Field2005,
        '400': Field400,
        '401': Field401,
        '404': Field404,
        '500': Field500,
    },
)


class Get5(TypedDict):
    tags: List[str]
    summary: str
    description: str
    operationId: str
    parameters: List[Parameter5]
    responses: Responses5


class FieldFrequenciesRainfallV0Format(TypedDict):
    get: Get5


class Field2006(TypedDict):
    description: str
    schema_: Schema


Responses6 = TypedDict(
    'Responses6',
    {
        '200': Field2006,
        '400': Field400,
        '401': Field401,
        '404': Field404,
        '500': Field500,
    },
)


class Get6(TypedDict):
    tags: List[str]
    summary: str
    description: str
    operationId: str
    parameters: List[Parameter5]
    responses: Responses6


class FieldFrequenciesRainfallAvailableSourcesV0Format(TypedDict):
    get: Get6


class Field2007(TypedDict):
    description: str
    schema_: Schema


Responses7 = TypedDict(
    'Responses7',
    {
        '200': Field2007,
        '400': Field400,
        '401': Field401,
        '404': Field404,
        '500': Field500,
    },
)


class Get7(TypedDict):
    tags: List[str]
    summary: str
    description: str
    operationId: str
    parameters: List[Parameter5]
    responses: Responses7


class FieldLocationsV0Format(TypedDict):
    get: Get7


class Field2008(TypedDict):
    description: str
    schema_: Schema


Responses8 = TypedDict(
    'Responses8',
    {
        '200': Field2008,
        '400': Field400,
        '401': Field401,
        '404': Field404,
        '500': Field500,
    },
)


class Get8(TypedDict):
    tags: List[str]
    summary: str
    description: str
    operationId: str
    parameters: List[Parameter5]
    responses: Responses8


class FieldObservationsAvailableTimeSeriesV0Format(TypedDict):
    get: Get8


class Field2009(TypedDict):
    description: str
    schema_: Schema


class Field403(TypedDict):
    description: str


class Field412(TypedDict):
    description: str


class Field429(TypedDict):
    description: str


class Field503(TypedDict):
    description: str


Responses9 = TypedDict(
    'Responses9',
    {
        '200': Field2009,
        '400': Field400,
        '401': Field401,
        '403': Field403,
        '404': Field404,
        '412': Field412,
        '429': Field429,
        '500': Field500,
        '503': Field503,
    },
)


class Get9(TypedDict):
    tags: List[str]
    summary: str
    description: str
    operationId: str
    parameters: List[Parameter5]
    responses: Responses9


class FieldObservationsV0Format(TypedDict):
    get: Get9


class Field20010(TypedDict):
    description: str
    schema_: Schema
    headers: Dict[str, Any]


Responses10 = TypedDict(
    'Responses10',
    {
        '200': Field20010,
    },
)


class Get10(TypedDict):
    tags: List[str]
    operationId: str
    parameters: List
    responses: Responses10


class FieldObservationsMetadataupdatecountV0(TypedDict):
    get: Get10


Parameter10 = TypedDict(
    'Parameter10',
    {
        'name': str,
        'in': str,
        'description': str,
        'required': bool,
        'type': str,
        'enum': NotRequired[List[str]],
        'default': NotRequired[str],
    },
)


class Field20011(TypedDict):
    description: str
    schema_: Schema


Responses11 = TypedDict(
    'Responses11',
    {
        '200': Field20011,
        '400': Field400,
        '401': Field401,
        '404': Field404,
        '500': Field500,
    },
)


class Get11(TypedDict):
    tags: List[str]
    summary: str
    description: str
    operationId: str
    parameters: List[Parameter10]
    responses: Responses11


class FieldObservationsQualityV0Format(TypedDict):
    get: Get11


Parameter11 = TypedDict(
    'Parameter11',
    {
        'name': str,
        'in': str,
        'description': str,
        'required': bool,
        'type': str,
        'default': NotRequired[str],
        'enum': List[str],
    },
)


class Field20012(TypedDict):
    description: str
    schema_: Schema


Responses12 = TypedDict(
    'Responses12',
    {
        '200': Field20012,
        '400': Field400,
        '401': Field401,
        '404': Field404,
        '500': Field500,
    },
)


class Get12(TypedDict):
    tags: List[str]
    summary: str
    description: str
    operationId: str
    parameters: List[Parameter11]
    responses: Responses12


class FieldObservationsAvailableQualityCodesV0Format(TypedDict):
    get: Get12


class Field20013(TypedDict):
    description: str
    schema_: Schema
    headers: Dict[str, Any]


Responses13 = TypedDict(
    'Responses13',
    {
        '200': Field20013,
    },
)


class Get13(TypedDict):
    tags: List[str]
    operationId: str
    parameters: List
    responses: Responses13


class FieldObservationsLastupdateV0(TypedDict):
    get: Get13


Parameter12 = TypedDict(
    'Parameter12',
    {
        'name': str,
        'in': str,
        'description': str,
        'required': bool,
        'type': str,
        'default': NotRequired[str],
        'enum': NotRequired[List[str]],
    },
)


class Field20014(TypedDict):
    description: str
    schema_: Schema


Responses14 = TypedDict(
    'Responses14',
    {
        '200': Field20014,
        '400': Field400,
        '401': Field401,
        '404': Field404,
        '500': Field500,
    },
)


class Get14(TypedDict):
    tags: List[str]
    summary: str
    description: str
    operationId: str
    parameters: List[Parameter12]
    responses: Responses14


class FieldRecordsCountyExtremesV0Format(TypedDict):
    get: Get14


class Schema15(TypedDict):
    type: str


class Field20015(TypedDict):
    description: str
    schema_: Schema15


Responses15 = TypedDict(
    'Responses15',
    {
        '200': Field20015,
        '400': Field400,
        '401': Field401,
        '404': Field404,
        '500': Field500,
        '503': Field503,
    },
)


class Get15(TypedDict):
    tags: List[str]
    summary: str
    description: str
    operationId: str
    produces: List[str]
    parameters: List[Parameter12]
    responses: Responses15


class FieldLightningV0Format(TypedDict):
    get: Get15


Paths = TypedDict(
    'Paths',
    {
        '/elements/v0.{format}': FieldElementsV0Format,
        '/elements/codeTables/v0.{format}': FieldElementsCodeTablesV0Format,
        '/climatenormals/v0.{format}': FieldClimatenormalsV0Format,
        '/climatenormals/available/v0.{format}': FieldClimatenormalsAvailableV0Format,
        '/sources/v0.{format}': FieldSourcesV0Format,
        '/frequencies/rainfall/v0.{format}': FieldFrequenciesRainfallV0Format,
        '/frequencies/rainfall/availableSources/v0.{format}': FieldFrequenciesRainfallAvailableSourcesV0Format,
        '/locations/v0.{format}': FieldLocationsV0Format,
        '/observations/availableTimeSeries/v0.{format}': FieldObservationsAvailableTimeSeriesV0Format,
        '/observations/v0.{format}': FieldObservationsV0Format,
        '/observations/metadataupdatecount/v0': FieldObservationsMetadataupdatecountV0,
        '/observations/quality/v0.{format}': FieldObservationsQualityV0Format,
        '/observations/availableQualityCodes/v0.{format}': FieldObservationsAvailableQualityCodesV0Format,
        '/observations/lastupdate/v0': FieldObservationsLastupdateV0,
        '/records/countyExtremes/v0.{format}': FieldRecordsCountyExtremesV0Format,
        '/lightning/v0.{format}': FieldLightningV0Format,
    },
)


class BaseName(TypedDict):
    type: str
    example: str
    description: str


class Method(TypedDict):
    type: str
    example: str
    description: str


class InnerMethod(TypedDict):
    type: str
    example: str
    description: str


class Period(TypedDict):
    type: str
    example: str
    description: str


class InnerPeriod(TypedDict):
    type: str
    example: str
    description: str


class Addition(TypedDict):
    type: str
    example: str
    description: str


class MethodDescription(TypedDict):
    type: str
    description: str


class InnerMethodDescription(TypedDict):
    type: str
    description: str


class MethodUnit(TypedDict):
    type: str
    description: str


class InnerMethodUnit(TypedDict):
    type: str
    description: str


class Properties(TypedDict):
    baseName: BaseName
    method: Method
    innerMethod: InnerMethod
    period: Period
    innerPeriod: InnerPeriod
    addition: Addition
    methodDescription: MethodDescription
    innerMethodDescription: InnerMethodDescription
    methodUnit: MethodUnit
    innerMethodUnit: InnerMethodUnit


class CalcMethod(TypedDict):
    type: str
    properties: Properties
    description: str


class StandardName(TypedDict):
    type: str
    example: str
    description: str


class CellMethod(TypedDict):
    type: str
    example: str
    description: str


class Unit(TypedDict):
    type: str
    example: str
    description: str


class Version(TypedDict):
    type: str
    example: str
    description: str


class Properties1(TypedDict):
    standardName: StandardName
    cellMethod: CellMethod
    unit: Unit
    version: Version


class CfConvention(TypedDict):
    type: str
    properties: Properties1
    description: str


class Id(TypedDict):
    type: str
    example: str
    description: str


class Name(TypedDict):
    type: str
    example: str
    description: str


class Description(TypedDict):
    type: str
    example: str
    description: str


class CodeTable(TypedDict):
    type: str
    example: str
    description: str


class Status(TypedDict):
    type: str
    example: str
    description: str


CalculationMethod = TypedDict(
    'CalculationMethod',
    {
        'description': str,
        '$ref': str,
    },
)


class Category(TypedDict):
    type: str
    description: str


TimeOffsets = TypedDict(
    'TimeOffsets',
    {
        'description': str,
        '$ref': str,
    },
)


SensorLevels = TypedDict(
    'SensorLevels',
    {
        'description': str,
        '$ref': str,
    },
)


OldConvention = TypedDict(
    'OldConvention',
    {
        'description': str,
        '$ref': str,
    },
)


CfConvention1 = TypedDict(
    'CfConvention1',
    {
        'description': str,
        '$ref': str,
    },
)


class Properties2(TypedDict):
    id: Id
    name: Name
    description: Description
    unit: Unit
    codeTable: CodeTable
    status: Status
    calculationMethod: CalculationMethod
    category: Category
    timeOffsets: TimeOffsets
    sensorLevels: SensorLevels
    oldConvention: OldConvention
    cfConvention: CfConvention1


class Element(TypedDict):
    type: str
    properties: Properties2
    description: str


class FieldContext(TypedDict):
    type: str
    format: str
    example: str
    description: str


class FieldType(TypedDict):
    type: str
    example: str
    description: str


class ApiVersion(TypedDict):
    type: str
    example: str
    description: str


class License1(TypedDict):
    type: str
    format: str
    example: str
    description: str


class CreatedAt(TypedDict):
    type: str
    example: str
    description: str


class QueryTime(TypedDict):
    type: str
    example: str
    description: str


class CurrentItemCount(TypedDict):
    type: str
    format: str
    example: int
    description: str


class ItemsPerPage(TypedDict):
    type: str
    format: str
    example: int
    description: str


class Offset(TypedDict):
    type: str
    format: str
    example: int
    description: str


class TotalItemCount(TypedDict):
    type: str
    format: str
    example: int
    description: str


class NextLink(TypedDict):
    type: str
    format: str
    example: str
    description: str


class PreviousLink(TypedDict):
    type: str
    format: str
    example: str
    description: str


class CurrentLink(TypedDict):
    type: str
    format: str
    example: str
    description: str


Items = TypedDict(
    'Items',
    {
        '$ref': str,
    },
)


class Data(TypedDict):
    type: str
    description: str
    items: Items


Properties3 = TypedDict(
    'Properties3',
    {
        '@context': FieldContext,
        '@type': FieldType,
        'apiVersion': ApiVersion,
        'license': License1,
        'createdAt': CreatedAt,
        'queryTime': QueryTime,
        'currentItemCount': CurrentItemCount,
        'itemsPerPage': ItemsPerPage,
        'offset': Offset,
        'totalItemCount': TotalItemCount,
        'nextLink': NextLink,
        'previousLink': PreviousLink,
        'currentLink': CurrentLink,
        'data': Data,
    },
)


class ElementResponse(TypedDict):
    type: str
    properties: Properties3
    description: str


class Items1(TypedDict):
    type: str


class ElementCodes(TypedDict):
    type: str
    example: str
    description: str
    items: Items1


class Properties4(TypedDict):
    elementCodes: ElementCodes
    unit: Unit


class OldMetNoConvention(TypedDict):
    type: str
    properties: Properties4
    description: str


class LevelType(TypedDict):
    type: str
    example: str
    description: str


class DefaultValue(TypedDict):
    type: str
    description: str


class Values(TypedDict):
    type: str
    description: str
    items: Items1


class Properties5(TypedDict):
    levelType: LevelType
    unit: Unit
    defaultValue: DefaultValue
    values: Values


class SensorLevels1(TypedDict):
    type: str
    properties: Properties5
    description: str


class Values1(TypedDict):
    type: str
    description: str
    items: Items1


class Properties6(TypedDict):
    defaultValue: DefaultValue
    values: Values1


class TimeOffsets1(TypedDict):
    type: str
    properties: Properties6
    description: str


class Description1(TypedDict):
    type: str
    description: str


class AdditionalInfo(TypedDict):
    type: str
    description: str


class Size(TypedDict):
    type: str
    description: str


Items4 = TypedDict(
    'Items4',
    {
        '$ref': str,
    },
)


class Values2(TypedDict):
    type: str
    description: str
    items: Items4


class Properties7(TypedDict):
    id: Id
    description: Description1
    additionalInfo: AdditionalInfo
    size: Size
    values: Values2


class CodeTable1(TypedDict):
    type: str
    properties: Properties7
    description: str


class Data1(TypedDict):
    type: str
    description: str
    items: Items4


Properties8 = TypedDict(
    'Properties8',
    {
        '@context': FieldContext,
        '@type': FieldType,
        'apiVersion': ApiVersion,
        'license': License1,
        'createdAt': CreatedAt,
        'queryTime': QueryTime,
        'currentItemCount': CurrentItemCount,
        'itemsPerPage': ItemsPerPage,
        'offset': Offset,
        'totalItemCount': TotalItemCount,
        'nextLink': NextLink,
        'previousLink': PreviousLink,
        'currentLink': CurrentLink,
        'data': Data1,
    },
)


class CodeTableResponse(TypedDict):
    type: str
    properties: Properties8
    description: str


class Value(TypedDict):
    type: str
    example: str
    description: str


class Properties9(TypedDict):
    value: Value
    description: Description1
    additionalInfo: AdditionalInfo


class CodeTableValue(TypedDict):
    type: str
    properties: Properties9
    description: str


class SourceId(TypedDict):
    type: str
    example: str
    description: str


class ElementId(TypedDict):
    type: str
    example: str
    description: str


class Month(TypedDict):
    type: str
    example: str
    description: str


class Day(TypedDict):
    type: str
    example: str
    description: str


class Normal(TypedDict):
    type: str
    example: str
    description: str


class Properties10(TypedDict):
    sourceId: SourceId
    elementId: ElementId
    period: Period
    month: Month
    day: Day
    normal: Normal


class ClimateNormal(TypedDict):
    type: str
    properties: Properties10
    description: str


class Data2(TypedDict):
    type: str
    description: str
    items: Items4


Properties11 = TypedDict(
    'Properties11',
    {
        '@context': FieldContext,
        '@type': FieldType,
        'apiVersion': ApiVersion,
        'license': License1,
        'createdAt': CreatedAt,
        'queryTime': QueryTime,
        'currentItemCount': CurrentItemCount,
        'itemsPerPage': ItemsPerPage,
        'offset': Offset,
        'totalItemCount': TotalItemCount,
        'nextLink': NextLink,
        'previousLink': PreviousLink,
        'currentLink': CurrentLink,
        'data': Data2,
    },
)


class ClimateNormalsResponse(TypedDict):
    type: str
    properties: Properties11
    description: str


class Properties12(TypedDict):
    sourceId: SourceId
    elementId: ElementId
    period: Period


class ClimateNormalsAvailable(TypedDict):
    type: str
    properties: Properties12
    description: str


class Data3(TypedDict):
    type: str
    description: str
    items: Items4


Properties13 = TypedDict(
    'Properties13',
    {
        '@context': FieldContext,
        '@type': FieldType,
        'apiVersion': ApiVersion,
        'license': License1,
        'createdAt': CreatedAt,
        'queryTime': QueryTime,
        'currentItemCount': CurrentItemCount,
        'itemsPerPage': ItemsPerPage,
        'offset': Offset,
        'totalItemCount': TotalItemCount,
        'nextLink': NextLink,
        'previousLink': PreviousLink,
        'currentLink': CurrentLink,
        'data': Data3,
    },
)


class ClimateNormalsAvailableResponse(TypedDict):
    type: str
    properties: Properties13
    description: str


class Items8(TypedDict):
    type: str


class Coordinates(TypedDict):
    type: str
    example: str
    description: str
    items: Items8


Properties14 = TypedDict(
    'Properties14',
    {
        '@type': FieldType,
        'coordinates': Coordinates,
    },
)


class Point(TypedDict):
    type: str
    properties: Properties14


class ShortName(TypedDict):
    type: str
    example: str
    description: str


class Country(TypedDict):
    type: str
    example: str
    description: str


class CountryCode(TypedDict):
    type: str
    example: str
    description: str


class WmoId(TypedDict):
    type: str
    example: str
    description: str


Geometry = TypedDict(
    'Geometry',
    {
        'description': str,
        '$ref': str,
    },
)


class Distance(TypedDict):
    type: str
    example: str
    description: str


class Masl(TypedDict):
    type: str
    example: str
    description: str


class ValidFrom(TypedDict):
    type: str
    example: str
    description: str


class ValidTo(TypedDict):
    type: str
    example: str
    description: str


class County(TypedDict):
    type: str
    example: str
    description: str


class CountyId(TypedDict):
    type: str
    example: str
    description: str


class Municipality(TypedDict):
    type: str
    example: str
    description: str


class MunicipalityId(TypedDict):
    type: str
    example: str
    description: str


class StationHolders(TypedDict):
    type: str
    example: str
    description: str
    items: Items8


class ExternalIds(TypedDict):
    type: str
    example: str
    description: str
    items: Items8


class IcaoCodes(TypedDict):
    type: str
    example: str
    description: str
    items: Items8


class ShipCodes(TypedDict):
    type: str
    example: str
    description: str
    items: Items8


class WigosId(TypedDict):
    type: str
    example: str
    description: str


Properties15 = TypedDict(
    'Properties15',
    {
        '@type': FieldType,
        'id': Id,
        'name': Name,
        'shortName': ShortName,
        'country': Country,
        'countryCode': CountryCode,
        'wmoId': WmoId,
        'geometry': Geometry,
        'distance': Distance,
        'masl': Masl,
        'validFrom': ValidFrom,
        'validTo': ValidTo,
        'county': County,
        'countyId': CountyId,
        'municipality': Municipality,
        'municipalityId': MunicipalityId,
        'stationHolders': StationHolders,
        'externalIds': ExternalIds,
        'icaoCodes': IcaoCodes,
        'shipCodes': ShipCodes,
        'wigosId': WigosId,
    },
)


class Source(TypedDict):
    type: str
    properties: Properties15
    description: str


Items13 = TypedDict(
    'Items13',
    {
        '$ref': str,
    },
)


class Data4(TypedDict):
    type: str
    description: str
    items: Items13


Properties16 = TypedDict(
    'Properties16',
    {
        '@context': FieldContext,
        '@type': FieldType,
        'apiVersion': ApiVersion,
        'license': License1,
        'createdAt': CreatedAt,
        'queryTime': QueryTime,
        'currentItemCount': CurrentItemCount,
        'itemsPerPage': ItemsPerPage,
        'offset': Offset,
        'totalItemCount': TotalItemCount,
        'nextLink': NextLink,
        'previousLink': PreviousLink,
        'currentLink': CurrentLink,
        'data': Data4,
    },
)


class SourceResponse(TypedDict):
    type: str
    properties: Properties16
    description: str


class Intensity(TypedDict):
    type: str
    format: str
    example: float
    description: str


class Duration(TypedDict):
    type: str
    format: str
    example: float
    description: str


class Frequency(TypedDict):
    type: str
    format: str
    example: int
    description: str


class Properties17(TypedDict):
    intensity: Intensity
    duration: Duration
    frequency: Frequency


class IDFValue(TypedDict):
    type: str
    properties: Properties17
    description: str


class Items14(TypedDict):
    type: str


class OperatingPeriods(TypedDict):
    type: str
    example: str
    description: str
    items: Items14


class NumberOfSeasons(TypedDict):
    type: str
    example: str
    description: str


class FirstYearOfPeriod(TypedDict):
    type: str
    example: str
    description: str


class LastYearOfPeriod(TypedDict):
    type: str
    example: str
    description: str


Items15 = TypedDict(
    'Items15',
    {
        '$ref': str,
    },
)


class Values3(TypedDict):
    type: str
    description: str
    items: Items15


class Properties18(TypedDict):
    sourceId: SourceId
    version: Version
    geometry: Geometry
    masl: Masl
    operatingPeriods: OperatingPeriods
    numberOfSeasons: NumberOfSeasons
    firstYearOfPeriod: FirstYearOfPeriod
    lastYearOfPeriod: LastYearOfPeriod
    unit: Unit
    values: Values3


class RainfallIDF(TypedDict):
    type: str
    properties: Properties18
    description: str


class Data5(TypedDict):
    type: str
    description: str
    items: Items15


Properties19 = TypedDict(
    'Properties19',
    {
        '@context': FieldContext,
        '@type': FieldType,
        'apiVersion': ApiVersion,
        'license': License1,
        'createdAt': CreatedAt,
        'queryTime': QueryTime,
        'currentItemCount': CurrentItemCount,
        'itemsPerPage': ItemsPerPage,
        'offset': Offset,
        'totalItemCount': TotalItemCount,
        'nextLink': NextLink,
        'previousLink': PreviousLink,
        'currentLink': CurrentLink,
        'data': Data5,
    },
)


class RainfallIDFResponse(TypedDict):
    type: str
    properties: Properties19
    description: str


class Properties20(TypedDict):
    sourceId: SourceId
    version: Version
    validFrom: ValidFrom
    validTo: ValidTo
    numberOfSeasons: NumberOfSeasons
    firstYearOfPeriod: FirstYearOfPeriod
    lastYearOfPeriod: LastYearOfPeriod


class RainfallIDFSource(TypedDict):
    type: str
    properties: Properties20
    description: str


class Data6(TypedDict):
    type: str
    description: str
    items: Items15


Properties21 = TypedDict(
    'Properties21',
    {
        '@context': FieldContext,
        '@type': FieldType,
        'apiVersion': ApiVersion,
        'license': License1,
        'createdAt': CreatedAt,
        'queryTime': QueryTime,
        'currentItemCount': CurrentItemCount,
        'itemsPerPage': ItemsPerPage,
        'offset': Offset,
        'totalItemCount': TotalItemCount,
        'nextLink': NextLink,
        'previousLink': PreviousLink,
        'currentLink': CurrentLink,
        'data': Data6,
    },
)


class RainfallIDFSourcesResponse(TypedDict):
    type: str
    properties: Properties21
    description: str


class Feature(TypedDict):
    type: str
    example: str
    description: str


class Properties22(TypedDict):
    name: Name
    feature: Feature
    geometry: Geometry


class Location(TypedDict):
    type: str
    properties: Properties22


class Data7(TypedDict):
    type: str
    description: str
    items: Items15


Properties23 = TypedDict(
    'Properties23',
    {
        '@context': FieldContext,
        '@type': FieldType,
        'apiVersion': ApiVersion,
        'license': License1,
        'createdAt': CreatedAt,
        'queryTime': QueryTime,
        'currentItemCount': CurrentItemCount,
        'itemsPerPage': ItemsPerPage,
        'offset': Offset,
        'totalItemCount': TotalItemCount,
        'nextLink': NextLink,
        'previousLink': PreviousLink,
        'currentLink': CurrentLink,
        'data': Data7,
    },
)


class LocationResponse(TypedDict):
    type: str
    properties: Properties23
    description: str


class Properties24(TypedDict):
    levelType: LevelType
    unit: Unit
    value: Value


class Level(TypedDict):
    type: str
    properties: Properties24


Level1 = TypedDict(
    'Level1',
    {
        'description': str,
        '$ref': str,
    },
)


class TimeOffset(TypedDict):
    type: str
    example: str
    description: str


class TimeResolution(TypedDict):
    type: str
    example: str
    description: str


class TimeSeriesId(TypedDict):
    type: str
    example: str
    description: str


class CodeTable2(TypedDict):
    type: str
    example: str
    description: str


class PerformanceCategory(TypedDict):
    type: str
    example: str
    description: str


class ExposureCategory(TypedDict):
    type: str
    example: str
    description: str


class Status1(TypedDict):
    type: str
    description: str


class Uri(TypedDict):
    type: str
    description: str


class Items19(TypedDict):
    type: str


class UserGroupIds(TypedDict):
    type: str
    items: Items19


class Properties25(TypedDict):
    sourceId: SourceId
    geometry: Geometry
    level: Level1
    validFrom: ValidFrom
    validTo: ValidTo
    timeOffset: TimeOffset
    timeResolution: TimeResolution
    timeSeriesId: TimeSeriesId
    elementId: ElementId
    unit: Unit
    codeTable: CodeTable2
    performanceCategory: PerformanceCategory
    exposureCategory: ExposureCategory
    status: Status1
    uri: Uri
    userGroupIds: UserGroupIds


class ObservationTimeSeries(TypedDict):
    type: str
    properties: Properties25
    description: str


Items20 = TypedDict(
    'Items20',
    {
        '$ref': str,
    },
)


class Data8(TypedDict):
    type: str
    description: str
    items: Items20


Properties26 = TypedDict(
    'Properties26',
    {
        '@context': FieldContext,
        '@type': FieldType,
        'apiVersion': ApiVersion,
        'license': License1,
        'createdAt': CreatedAt,
        'queryTime': QueryTime,
        'currentItemCount': CurrentItemCount,
        'itemsPerPage': ItemsPerPage,
        'offset': Offset,
        'totalItemCount': TotalItemCount,
        'nextLink': NextLink,
        'previousLink': PreviousLink,
        'currentLink': CurrentLink,
        'data': Data8,
    },
)


class ObservationTimeSeriesResponse(TypedDict):
    type: str
    properties: Properties26
    description: str


class OrigValue(TypedDict):
    type: str
    example: str
    description: str


class QualityCode(TypedDict):
    type: str
    example: str
    description: str


class ControlInfo(TypedDict):
    type: str
    example: str
    description: str


class DataVersion(TypedDict):
    type: str
    example: str
    description: str


class Properties27(TypedDict):
    elementId: ElementId
    value: Value
    origValue: OrigValue
    unit: Unit
    codeTable: CodeTable2
    level: Level1
    timeOffset: TimeOffset
    timeResolution: TimeResolution
    timeSeriesId: TimeSeriesId
    performanceCategory: PerformanceCategory
    exposureCategory: ExposureCategory
    qualityCode: QualityCode
    controlInfo: ControlInfo
    dataVersion: DataVersion


class Observation(TypedDict):
    type: str
    properties: Properties27
    description: str


class Data9(TypedDict):
    type: str
    description: str
    items: Items20


Properties28 = TypedDict(
    'Properties28',
    {
        '@context': FieldContext,
        '@type': FieldType,
        'apiVersion': ApiVersion,
        'license': License1,
        'createdAt': CreatedAt,
        'queryTime': QueryTime,
        'currentItemCount': CurrentItemCount,
        'itemsPerPage': ItemsPerPage,
        'offset': Offset,
        'totalItemCount': TotalItemCount,
        'nextLink': NextLink,
        'previousLink': PreviousLink,
        'currentLink': CurrentLink,
        'data': Data9,
    },
)


class ObservationResponse(TypedDict):
    type: str
    properties: Properties28
    description: str


class ReferenceTime(TypedDict):
    type: str
    example: str
    description: str


class Observations(TypedDict):
    type: str
    description: str
    items: Items20


class Properties29(TypedDict):
    sourceId: SourceId
    geometry: Geometry
    referenceTime: ReferenceTime
    observations: Observations


class ObservationsAtRefTime(TypedDict):
    type: str
    properties: Properties29
    description: str


class Action(TypedDict):
    type: str


class ActionAnyContent(TypedDict):
    type: str


Summarized = TypedDict(
    'Summarized',
    {
        'description': str,
        '$ref': str,
    },
)


class Flag(TypedDict):
    type: str
    example: str
    description: str


class Details(TypedDict):
    type: str
    description: str
    items: Items20


class Properties30(TypedDict):
    summarized: Summarized
    flag: Flag
    details: Details


class QualityInformation(TypedDict):
    type: str
    properties: Properties30
    description: str


Data10 = TypedDict(
    'Data10',
    {
        'description': str,
        '$ref': str,
    },
)


Properties31 = TypedDict(
    'Properties31',
    {
        '@context': FieldContext,
        '@type': FieldType,
        'apiVersion': ApiVersion,
        'license': License1,
        'createdAt': CreatedAt,
        'queryTime': QueryTime,
        'currentItemCount': CurrentItemCount,
        'itemsPerPage': ItemsPerPage,
        'offset': Offset,
        'totalItemCount': TotalItemCount,
        'nextLink': NextLink,
        'previousLink': PreviousLink,
        'currentLink': CurrentLink,
        'data': Data10,
    },
)


class QualityInformationResponse(TypedDict):
    type: str
    properties: Properties31
    description: str


class ControlType(TypedDict):
    type: str
    example: str
    description: str


class Value3(TypedDict):
    type: str
    format: str
    example: int
    description: str


class Meaning(TypedDict):
    type: str
    example: str
    description: str


class Properties32(TypedDict):
    controlType: ControlType
    value: Value3
    meaning: Meaning


class TextualQualityInformation(TypedDict):
    type: str
    properties: Properties32
    description: str


class ShortMeaning(TypedDict):
    type: str
    example: str
    description: str


class Properties33(TypedDict):
    value: Value3
    shortMeaning: ShortMeaning
    meaning: Meaning


class UserQualityInformation(TypedDict):
    type: str
    properties: Properties33
    description: str


class SourceName(TypedDict):
    type: str
    example: str
    description: str


class Value5(TypedDict):
    type: str
    example: str
    description: str


class Properties34(TypedDict):
    sourceId: SourceId
    sourceName: SourceName
    county: County
    municipality: Municipality
    elementId: ElementId
    month: Month
    referenceTime: ReferenceTime
    value: Value5


class Record(TypedDict):
    type: str
    properties: Properties34
    description: str


class Data11(TypedDict):
    type: str
    description: str
    items: Items20


Properties35 = TypedDict(
    'Properties35',
    {
        '@context': FieldContext,
        '@type': FieldType,
        'apiVersion': ApiVersion,
        'license': License1,
        'createdAt': CreatedAt,
        'queryTime': QueryTime,
        'currentItemCount': CurrentItemCount,
        'itemsPerPage': ItemsPerPage,
        'offset': Offset,
        'totalItemCount': TotalItemCount,
        'nextLink': NextLink,
        'previousLink': PreviousLink,
        'currentLink': CurrentLink,
        'data': Data11,
    },
)


class RecordsResponse(TypedDict):
    type: str
    properties: Properties35
    description: str


class Definitions(TypedDict):
    CalcMethod: CalcMethod
    CfConvention: CfConvention
    Element: Element
    ElementResponse: ElementResponse
    OldMetNoConvention: OldMetNoConvention
    SensorLevels: SensorLevels1
    TimeOffsets: TimeOffsets1
    CodeTable: CodeTable1
    CodeTableResponse: CodeTableResponse
    CodeTableValue: CodeTableValue
    ClimateNormal: ClimateNormal
    ClimateNormalsResponse: ClimateNormalsResponse
    ClimateNormalsAvailable: ClimateNormalsAvailable
    ClimateNormalsAvailableResponse: ClimateNormalsAvailableResponse
    Point: Point
    Source: Source
    SourceResponse: SourceResponse
    IDFValue: IDFValue
    RainfallIDF: RainfallIDF
    RainfallIDFResponse: RainfallIDFResponse
    RainfallIDFSource: RainfallIDFSource
    RainfallIDFSourcesResponse: RainfallIDFSourcesResponse
    Location: Location
    LocationResponse: LocationResponse
    Level: Level
    ObservationTimeSeries: ObservationTimeSeries
    ObservationTimeSeriesResponse: ObservationTimeSeriesResponse
    Observation: Observation
    ObservationResponse: ObservationResponse
    ObservationsAtRefTime: ObservationsAtRefTime
    Action: Action
    ActionAnyContent: ActionAnyContent
    QualityInformation: QualityInformation
    QualityInformationResponse: QualityInformationResponse
    TextualQualityInformation: TextualQualityInformation
    UserQualityInformation: UserQualityInformation
    Record: Record
    RecordsResponse: RecordsResponse


class Model(TypedDict):
    swagger: str
    info: Info
    host: str
    basePath: str
    tags: List[Tag]
    paths: Paths
    definitions: Definitions
